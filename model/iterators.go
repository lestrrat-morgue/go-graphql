package model

// Auto-generated by internal/cmd/geniters/geniters.go. DO NOT EDIT

type ArgumentList []Argument

func (l *ArgumentList) Add(list ...Argument) {
	*l = append(*l, list...)
}

func (v ArgumentList) Iterator() chan Argument {
	ch := make(chan Argument, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type DirectiveList []Directive

func (l *DirectiveList) Add(list ...Directive) {
	*l = append(*l, list...)
}

func (v DirectiveList) Iterator() chan Directive {
	ch := make(chan Directive, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type DefinitionList []Definition

func (l *DefinitionList) Add(list ...Definition) {
	*l = append(*l, list...)
}

func (v DefinitionList) Iterator() chan Definition {
	ch := make(chan Definition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type NamedTypeList []NamedType

func (l *NamedTypeList) Add(list ...NamedType) {
	*l = append(*l, list...)
}

func (v NamedTypeList) Iterator() chan NamedType {
	ch := make(chan NamedType, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type SelectionList []Selection

func (l *SelectionList) Add(list ...Selection) {
	*l = append(*l, list...)
}

func (v SelectionList) Iterator() chan Selection {
	ch := make(chan Selection, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type TypeList []Type

func (l *TypeList) Add(list ...Type) {
	*l = append(*l, list...)
}

func (v TypeList) Iterator() chan Type {
	ch := make(chan Type, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type VariableDefinitionList []VariableDefinition

func (l *VariableDefinitionList) Add(list ...VariableDefinition) {
	*l = append(*l, list...)
}

func (v VariableDefinitionList) Iterator() chan VariableDefinition {
	ch := make(chan VariableDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type ObjectDefinitionList []ObjectDefinition

func (l *ObjectDefinitionList) Add(list ...ObjectDefinition) {
	*l = append(*l, list...)
}

func (v ObjectDefinitionList) Iterator() chan ObjectDefinition {
	ch := make(chan ObjectDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type ObjectFieldList []ObjectField

func (l *ObjectFieldList) Add(list ...ObjectField) {
	*l = append(*l, list...)
}

func (v ObjectFieldList) Iterator() chan ObjectField {
	ch := make(chan ObjectField, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type ObjectFieldDefinitionList []ObjectFieldDefinition

func (l *ObjectFieldDefinitionList) Add(list ...ObjectFieldDefinition) {
	*l = append(*l, list...)
}

func (v ObjectFieldDefinitionList) Iterator() chan ObjectFieldDefinition {
	ch := make(chan ObjectFieldDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type EnumElementDefinitionList []EnumElementDefinition

func (l *EnumElementDefinitionList) Add(list ...EnumElementDefinition) {
	*l = append(*l, list...)
}

func (v EnumElementDefinitionList) Iterator() chan EnumElementDefinition {
	ch := make(chan EnumElementDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type InterfaceFieldDefinitionList []*InterfaceFieldDefinition

func (l *InterfaceFieldDefinitionList) Add(list ...*InterfaceFieldDefinition) {
	*l = append(*l, list...)
}

func (v InterfaceFieldDefinitionList) Iterator() chan *InterfaceFieldDefinition {
	ch := make(chan *InterfaceFieldDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type InputFieldDefinitionList []*InputFieldDefinition

func (l *InputFieldDefinitionList) Add(list ...*InputFieldDefinition) {
	*l = append(*l, list...)
}

func (v InputFieldDefinitionList) Iterator() chan *InputFieldDefinition {
	ch := make(chan *InputFieldDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}

type ObjectFieldArgumentDefinitionList []ObjectFieldArgumentDefinition

func (l *ObjectFieldArgumentDefinitionList) Add(list ...ObjectFieldArgumentDefinition) {
	*l = append(*l, list...)
}

func (v ObjectFieldArgumentDefinitionList) Iterator() chan ObjectFieldArgumentDefinition {
	ch := make(chan ObjectFieldArgumentDefinition, len(v))
	for _, e := range v {
		ch <- e
	}
	close(ch)
	return ch
}
