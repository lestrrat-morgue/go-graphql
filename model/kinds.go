package model

// Auto-generated by internal/cmd/genkinds/genkinds.go. DO NOT EDIT

import (
	"encoding/json"
	"strconv"

	"github.com/pkg/errors"
)

type Kind int

const (
	InvalidKind Kind = iota
	IntKind
	FloatKind
	StringKind
	BooleanKind
	EnumKind
	ListKind
	ObjectKind
)

func (k Kind) MarshalJSON() ([]byte, error) {
	return []byte(strconv.Quote(k.String())), nil
}

func (k *Kind) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return errors.Wrap(err, `failed to unmarshal string`)
	}
	switch s {
	case "Int":
		*k = IntKind
		return nil
	case "Float":
		*k = FloatKind
		return nil
	case "String":
		*k = StringKind
		return nil
	case "Boolean":
		*k = BooleanKind
		return nil
	case "Enum":
		*k = EnumKind
		return nil
	case "List":
		*k = ListKind
		return nil
	case "Object":
		*k = ObjectKind
		return nil
	}
	return errors.Errorf("invalid kind in unmarshal: %s", s)
}

func (k Kind) String() string {
	switch k {
	case IntKind:
		return "Int"
	case FloatKind:
		return "Float"
	case StringKind:
		return "String"
	case BooleanKind:
		return "Boolean"
	case EnumKind:
		return "Enum"
	case ListKind:
		return "List"
	case ObjectKind:
		return "Object"
	}
	return "Invalid"
}
