package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strconv"
)

func main() {
	if err := _main(); err != nil {
		fmt.Printf("%s\n", err)
		os.Exit(1)
	}
}

type TokenSpec struct {
	Name        string
	Description string
}

func _main() error {
	var types = []TokenSpec{
		{Name: `ILLEGAL`, Description: `ILLEGAL`},
		{Name: `IGNORABLE`, Description: `Ignorable content, e.g. spaces`},
		{Name: `EOF`, Description: `EOF`},
		{Name: `BANG`, Description: `!`},
		{Name: `DOLLAR`, Description: `$`},
		{Name: `PAREN_L`, Description: `(`},
		{Name: `PAREN_R`, Description: `)`},
		{Name: `SPREAD`, Description: `...`},
		{Name: `COLON`, Description: `:`},
		{Name: `EQUALS`, Description: `=`},
		{Name: `AT`, Description: `@`},
		{Name: `BRACKET_L`, Description: `[`},
		{Name: `BRACKET_R`, Description: `]`},
		{Name: `BRACE_L`, Description: `{`},
		{Name: `PIPE`, Description: `|`},
		{Name: `BRACE_R`, Description: `}`},
		{Name: `NAME`, Description: `Name`},
		{Name: `INT`, Description: `Int`},
		{Name: `FLOAT`, Description: `Float`},
		{Name: `STRING`, Description: `String`},
		{Name: `TokenTypeMax`, Description: `Max value for token types`},
	}

	if err := genTokens(types, "parser/tokens.go"); err != nil {
		return err
	}
	if err := genTests(types, "parser/tokens_test.go"); err != nil {
		return err
	}

	return nil
}

func genTokens(types []TokenSpec, dstfn string) error {
	var buf bytes.Buffer

	buf.WriteString("// Auto-generated by internal/cmd/gentokens. DO NOT EDIT")
	buf.WriteString("\n\npackage parser")
	buf.WriteString("\n\ntype TokenType int")
	buf.WriteString("\n\n const (")
	for i, spec := range types {
		if i == 0 {
			fmt.Fprintf(&buf, "\n%s TokenType = iota // %s", spec.Name, spec.Description)
		} else {
			fmt.Fprintf(&buf, "\n%s // %s", spec.Name, spec.Description)
		}
	}
	buf.WriteString("\n)")
	buf.WriteString("\n\nfunc (tt TokenType) String() string {")
	buf.WriteString("\nconst s = \"")
	lengths := make([]struct {
		Start int
		End   int
	}, len(types))
	prev := 0
	for i, spec := range types {
		lengths[i].Start = prev
		lengths[i].End = prev + len(spec.Name)
		prev = lengths[i].End
		buf.WriteString(spec.Name)
	}
	buf.WriteString("\"")
	buf.WriteString("\nswitch tt {")
	for i, spec := range types {
		fmt.Fprintf(&buf, "\ncase %s:", spec.Name)
		fmt.Fprintf(&buf, "\nreturn s[%d:%d]", lengths[i].Start, lengths[i].End)
	}
	buf.WriteString("\ndefault:")
	buf.WriteString("\nreturn \"invalid\"")
	buf.WriteString("\n}")
	buf.WriteString("\n}")
	b, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Printf("%s\n", buf.Bytes())
		return err
	}

	f, err := os.Create(dstfn)
	if err != nil {
		return err
	}
	defer f.Close()
	f.Write(b)
	return nil
}

func genTests(types []TokenSpec, dstfn string) error {
	var buf bytes.Buffer

	buf.WriteString("// Auto-generated by internal/cmd/gentokens. DO NOT EDIT")
	buf.WriteString("\n\npackage parser_test")
	buf.WriteString("\n\nimport (")
	for _, lib := range []string{ "github.com/stretchr/testify/assert", "github.com/lestrrat/go-graphql/parser", "testing"} {
		buf.WriteByte('\n')
		buf.WriteString(strconv.Quote(lib))
	}
	buf.WriteString("\n)")
	buf.WriteString("\n\nfunc TestTokenTypeString(t *testing.T) {")
	for _, spec := range types {
		fmt.Fprintf(&buf, "\nt.Run(%s, func(t *testing.T) {", strconv.Quote(spec.Name))
		fmt.Fprintf(&buf, "\ntok := parser.%s", spec.Name)
		fmt.Fprintf(&buf, "\nif !assert.Equal(t, %s, tok.String(), \"strings match\") {", strconv.Quote(spec.Name))
		buf.WriteString("\nreturn")
		buf.WriteString("\n}")
		buf.WriteString("\n})")
	}
	buf.WriteString("\n}")

	b, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Printf("%s\n", buf.Bytes())
		return err
	}

	f, err := os.Create(dstfn)
	if err != nil {
		return err
	}
	defer f.Close()
	f.Write(b)
	return nil
}
